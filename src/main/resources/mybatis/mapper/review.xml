<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.dao.ReviewDao">
	<select id="count" parameterType="String" resultType="int">
		select count(*)
		from review
		where sno in
    		(
			select sno
			from social
			where mid=#{mid}
			)
	</select>

	<insert id="insert" parameterType="review">
		insert into review(sno, mid, rcontent, rdate)
		values(#{sno}, #{mid}, #{rcontent}, sysdate)
	</insert>

	<select id="selectIsReviewByParam" parameterType="review" resultType="boolean">
		select count(*)
		from review
		where sno=#{sno} and mid=#{mid}
	</select>

	<select id="selectReviewByParam" parameterType="review" resultType="review">
		select *
		from review
		where sno=#{sno} and mid=#{mid}
	</select>

	<update id="updateReview" parameterType="review">
		update review
		set rcontent=#{rcontent}
		where mid=#{mid} and sno=#{sno}
	</update>

	<delete id="deleteReview" parameterType="review">
		delete from review
		where mid=#{mid} and sno=#{sno}
	</delete>
	
	<resultMap type="HashMap" id="reviewForm">
	  <result property="sno" column="sno" />
	  <result property="mid" column="mid" />
	  <result property="mname" column="mname" />
	  <result property="stitle" column="stitle" />
	  <result property="sstartDate" column="sstartDate" />
	  <result property="rcontent" column="rcontent" javaType="String" jdbcType="CLOB" />
	  <result property="rdate" column="rdate" />
	</resultMap>
	
	<select id="selectRecieveReviewByMid" parameterType="Map" resultMap="reviewForm">
		select rnum, sno, mname, sstartdate, stitle, mid, rcontent, rdate
		from(
			select rownum as rnum, sno, mname, stitle, sstartdate, mid, rcontent, rdate
			from(
				select review.sno, review.mid, member.mname, social.stitle, social.sstartdate, rcontent, rdate
				from review, social, member
				where member.mid=review.mid and review.sno=social.sno and review.sno in (
				    select sno
				    from social
				    where social.mid=#{mid} and social.sstatus not in ('cancel')
				)
				order by social.sstartdate desc, social.sstarttime desc, review.rdate desc			
			)
			where <![CDATA[ rownum <= #{pager.endRowNo}]]>
		)
		where <![CDATA[ rnum >= #{pager.startRowNo}]]> 
	</select>

	<select id="countRecieveReview" parameterType="String" resultType="int">
		select count(*)
		from review
		where sno in (
			select sno
			from social
			where mid=#{mid}
		)
	</select>
	<select id="countLeaveReview" parameterType="String" resultType="int">
		select count(*)
		from review
		where mid=#{mid}
	</select>
	
	<select id="selectLeaveReviewByMid" parameterType="Map" resultMap="reviewForm">
		select rnum, sno, mname, sstartdate, stitle, mid, rcontent, rdate
		from(
			select rownum as rnum, sno, mname, stitle, sstartdate, mid, rcontent, rdate
			from(
				select review.sno, review.mid, member.mname, social.stitle, social.sstartdate, rcontent, rdate
				from review, social, member
				where member.mid=review.mid and review.sno=social.sno and review.mid = #{mid}
				order by social.sstartdate desc, social.sstarttime desc, review.rdate desc			
			)
			where <![CDATA[ rownum <= #{pager.endRowNo}]]>
		)
		where <![CDATA[ rnum >= #{pager.startRowNo}]]> 
	</select>

	<select id="countAll" resultType="int">
		select count(*)
		from review
	</select>
	
	<select id="selectByPage" parameterType="pager" resultMap="reviewForm">
		<![CDATA[
		SELECT rnum, mid, rcontent, rdate, stitle, sno
		FROM (
			SELECT rownum AS rnum, mid, rcontent, rdate, stitle, sno
			FROM (
				SELECT review.mid, review.rcontent, review.rdate, social.stitle , review.sno
				FROM review 
				JOIN social ON review.sno = social.sno
				ORDER BY review.rdate DESC
			) 
			WHERE rownum <= #{endRowNo}
		) 
		WHERE rnum >= #{startRowNo}
		]]>
    </select>
    
    <select id="getReview" resultType="Review">
	<![CDATA[
    	select rcontent, rdate, mid
		from (
		    select rcontent, rdate, mid
		    from review
		    order by rdate desc
		)
		where rownum <= 4
	]]>
    </select>
	

</mapper>
